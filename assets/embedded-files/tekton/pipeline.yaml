---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: staging-pipeline
  namespace: tekton-staging
spec:
  workspaces:
  - name: source
  resources:
  - name: source-repo
    type: git
  params:
    - name: ENVIRONMENT
      type: string
    - name: APP_NAME
      type: string
      description: "The application name (used as label or name in various resources)"
    - name: ORG
      type: string
      description: "The application organization (used as the namespace where the app runs)"
    - name: ROUTE
      type: string
      description: "The application route (used for Ingress)"
    - name: INSTANCES
      type: string
      description: "The number of instances the application should have"
    - name: APP_IMAGE
      type: string
      description: "The image as built and pushed by Tekton (uses Kube internal service DNS)"
    - name: DEPLOYMENT_IMAGE
      type: string
      description: "The container image for the application Deployment"
    - name: STAGE_ID
      type: string
      description: "The identifier of the unique staging process"
    - name: OWNER_APIVERSION
      type: string
      description: "The API version of the owner"
    - name: OWNER_KIND
      type: string
      description: "The API kind of the owner"
    - name: OWNER_NAME
      type: string
      description: "The name of the owner"
    - name: OWNER_UID
      type: string
      description: "The uid of the owner"
    - name: ENV_VARS
      type: array
      description: "Build time environment variables"
  tasks:
  - name: clone
    taskRef:
      name: clone
    resources:
      inputs:
      - name: source-repo
        resource: source-repo
    workspaces:
    - name: source
      workspace: source
  - name: stage
    taskRef:
      name: buildpacks
    runAfter:
    - clone
    params:
    - name: BUILDER_IMAGE
      value: paketobuildpacks/builder:full
    - name: SOURCE_SUBPATH
      value: app
    - name: APP_IMAGE
      value: "$(params.APP_IMAGE)"
    - name: ENV_VARS
      value: ["$(params.ENV_VARS[*])"]
    workspaces:
    - name: source
      workspace: source
  - name: run
    taskRef:
      name: run
    params:
      - name: ENVIRONMENT
        value: "$(params.ENVIRONMENT)"
      - name: APP_NAME
        value: "$(params.APP_NAME)"
      - name: ORG
        value: "$(params.ORG)"
      - name: ROUTE
        value: "$(params.ROUTE)"
      - name: INSTANCES
        value: $(params.INSTANCES)
      - name: DEPLOYMENT_IMAGE
        value: "$(params.DEPLOYMENT_IMAGE)"
      - name: STAGE_ID
        value: "$(params.STAGE_ID)"
      - name: OWNER_APIVERSION
        value: "$(params.OWNER_APIVERSION)"
      - name: OWNER_KIND
        value: "$(params.OWNER_KIND)"
      - name: OWNER_NAME
        value: "$(params.OWNER_NAME)"
      - name: OWNER_UID
        value: "$(params.OWNER_UID)"
    runAfter:
    - stage
  - name: clean
    taskRef:
      name: clean
    params:
      - name: APP_NAME
        value: "$(params.APP_NAME)"
      - name: ORG
        value: "$(params.ORG)"
      - name: STAGE_ID
        value: "$(params.STAGE_ID)"
    runAfter:
    - run
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: clone
  namespace: tekton-staging
spec:
  workspaces:
  - name: source
  resources:
    inputs:
    - name: source-repo
      type: git
      targetPath: source/app
  steps:
  - name: stage
    image: lachlanevenson/k8s-kubectl
    workingDir: "/workspace/source/app"
    command:
      - sh
    args:
      - -c
      - |
        pwd
        ls -la
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: run
  namespace: tekton-staging
spec:
  params:
    - name: ENVIRONMENT
      type: string
    - name: APP_NAME
      type: string
    - name: ORG
      type: string
    - name: ROUTE
      type: string
    - name: INSTANCES
      type: string
    - name: DEPLOYMENT_IMAGE
      type: string
    - name: STAGE_ID
      type: string
    - name: OWNER_APIVERSION
      type: string
    - name: OWNER_KIND
      type: string
    - name: OWNER_NAME
      type: string
    - name: OWNER_UID
      type: string
  steps:
  - name: run
    image: lachlanevenson/k8s-kubectl
    command:
      - sh
    args:
      - -c
      - |
        cat <<EOF | kubectl apply -f -
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: "$(params.APP_NAME)"
          namespace: "$(params.ORG)"
          labels:
            app.kubernetes.io/name: "$(params.APP_NAME)"
            app.kubernetes.io/part-of: "$(params.ORG)"
            app.kubernetes.io/component: application
            app.kubernetes.io/managed-by: epinio
          ownerReferences:
          - apiVersion: "$(params.OWNER_APIVERSION)"
            kind: "$(params.OWNER_KIND)"
            name: "$(params.OWNER_NAME)"
            uid: "$(params.OWNER_UID)"
        spec:
          replicas: $(params.INSTANCES)
          selector:
            matchLabels:
              app.kubernetes.io/name: "$(params.APP_NAME)"
          template:
            metadata:
              labels:
                app.kubernetes.io/name: "$(params.APP_NAME)"
                epinio.suse.org/stage-id: "$(params.STAGE_ID)"
                app.kubernetes.io/part-of: "$(params.ORG)"
                app.kubernetes.io/component: application
                app.kubernetes.io/managed-by: epinio
              annotations:
                app.kubernetes.io/name: "$(params.APP_NAME)"
            spec:
              serviceAccountName: "$(params.ORG)"
              automountServiceAccountToken: true
              containers:
              - name: "$(params.APP_NAME)"
                image: "$(params.DEPLOYMENT_IMAGE)"
                ports:
                - containerPort: 8080
                env: $(params.ENVIRONMENT)
        EOF

        cat <<EOF | kubectl apply -f -
        ---
        apiVersion: v1
        kind: Service
        metadata:
          annotations:
            kubernetes.io/ingress.class: traefik
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.tls: "true"
          labels:
            app.kubernetes.io/component: application
            app.kubernetes.io/managed-by: epinio
            app.kubernetes.io/name: $(params.APP_NAME)
            app.kubernetes.io/part-of: $(params.ORG)
          ownerReferences:
          - apiVersion: "$(params.OWNER_APIVERSION)"
            kind: "$(params.OWNER_KIND)"
            name: "$(params.OWNER_NAME)"
            uid: "$(params.OWNER_UID)"
          name: $(params.APP_NAME)
          namespace: $(params.ORG)
        spec:
          ports:
          - port: 8080
            protocol: TCP
            targetPort: 8080
          selector:
            app.kubernetes.io/component: "application"
            app.kubernetes.io/name: "$(params.APP_NAME)"
          type: ClusterIP
        EOF

        cat <<EOF | kubectl apply -f -
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          annotations:
            traefik.ingress.kubernetes.io/router.entrypoints: websecure
            traefik.ingress.kubernetes.io/router.tls: "true"
            kubernetes.io/ingress.class: traefik
          labels:
            app.kubernetes.io/component: application
            app.kubernetes.io/managed-by: epinio
            app.kubernetes.io/name: $(params.APP_NAME)
            app.kubernetes.io/part-of: $(params.ORG)
          ownerReferences:
          - apiVersion: "$(params.OWNER_APIVERSION)"
            kind: "$(params.OWNER_KIND)"
            name: "$(params.OWNER_NAME)"
            uid: "$(params.OWNER_UID)"
          name: $(params.APP_NAME)
          namespace: $(params.ORG)
        spec:
          rules:
          - host: $(params.ROUTE)
            http:
              paths:
              - backend:
                  service:
                    name: $(params.APP_NAME)
                    port:
                      number: 8080
                path: /
                pathType: ImplementationSpecific
          tls:
          - hosts:
            - $(params.ROUTE)
            secretName: $(params.APP_NAME)-tls
        EOF
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: clean
  namespace: tekton-staging
spec:
  params:
    - name: APP_NAME
      type: string
    - name: ORG
      type: string
    - name: STAGE_ID
      type: string
  steps:
  - name: clean
    image: lachlanevenson/k8s-kubectl
    command:
      - sh
    args:
      - -c
      - |
        # (kubectl get ..) Get all pipeline runs for the application specified by name and org.
        # (jsonpath)       Just their names.
        # (if test)        Exclude the current run (name == stage_id).
        # (for/kube ...)   Delete the remainder.
        #
        echo "Cleaning up old runs of application '$(params.APP_NAME)' in organization '$(params.ORG)'"
        echo "Current run to ignore is '$(params.STAGE_ID)'"
        for run in $(kubectl get pipelinerun -n tekton-staging -l "app.kubernetes.io/name=$(params.APP_NAME),app.kubernetes.io/part-of=$(params.ORG)" -o "jsonpath={.items[*].metadata.name}")
        do
          if test "$run" == "$(params.STAGE_ID)" ; then continue ; fi
          echo "Remove: $run"
          kubectl delete pipelinerun -n tekton-staging "$run"
        done
